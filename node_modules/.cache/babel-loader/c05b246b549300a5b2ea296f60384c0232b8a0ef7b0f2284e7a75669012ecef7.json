{"ast":null,"code":"var _jsxFileName = \"/home/raissa/Documentos/Projetos-dev/react-typescript/lista-tarefas/todo/src/components/ListItem/index.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport * as C from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListItem = _ref => {\n  _s();\n  let {\n    item,\n    onChange\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(item.done); //pode modificar.\n\n  return (\n    /*#__PURE__*/\n    // done interligado ao checked \n    _jsxDEV(C.Container, {\n      done: item.done,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isChecked,\n        onChange: e => setIsChecked(e.target.checked) // quando modificar valor do input vai salvar o valor atual(marcado/desmarcado)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(ListItem, \"slRtE77wIdJXbbC1JMU0NK84Ns8=\");\n_c = ListItem;\nvar _c;\n$RefreshReg$(_c, \"ListItem\");","map":{"version":3,"names":["useState","C","ListItem","item","onChange","isChecked","setIsChecked","done","e","target","checked","name"],"sources":["/home/raissa/Documentos/Projetos-dev/react-typescript/lista-tarefas/todo/src/components/ListItem/index.tsx"],"sourcesContent":["import { useState} from 'react'\nimport * as C from './styles'\nimport { Item } from '../../types/Item'\n// sempre que criar props especificas em typescript, precisa criar type pARA ESSAS props\n// e espefica tudo que vai receber\ntype Props = {\n  item: Item,\n  onChange: (id: number, done: boolean) => void\n}\nexport const ListItem = ({item, onChange}: Props) => {\n  const [isChecked, setIsChecked] = useState(item.done); //pode modificar.\n\n  return (\n    // done interligado ao checked \n    <C.Container done={item.done}> \n      <input\n        type=\"checkbox\" \n        checked={isChecked}\n        onChange={e => setIsChecked(e.target.checked)} // quando modificar valor do input vai salvar o valor atual(marcado/desmarcado)\n      />\n      <label>{item.name}</label>\n    </C.Container>\n  )\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAO,OAAO;AAC/B,OAAO,KAAKC,CAAC,MAAM,UAAU;AAAA;AAQ7B,OAAO,MAAMC,QAAQ,GAAG,QAA6B;EAAA;EAAA,IAA5B;IAACC,IAAI;IAAEC;EAAe,CAAC;EAC9C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAACG,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC;;EAEvD;IAAA;IACE;IACA,QAAC,CAAC,CAAC,SAAS;MAAC,IAAI,EAAEJ,IAAI,CAACI,IAAK;MAAA,wBAC3B;QACE,IAAI,EAAC,UAAU;QACf,OAAO,EAAEF,SAAU;QACnB,QAAQ,EAAEG,CAAC,IAAIF,YAAY,CAACE,CAAC,CAACC,MAAM,CAACC,OAAO,CAAE,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAC/C,eACF;QAAA,UAAQP,IAAI,CAACQ;MAAI;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA;EACd;AAElB,CAAC;AAAA,GAdYT,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}